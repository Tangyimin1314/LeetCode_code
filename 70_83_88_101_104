70爬楼梯
class Solution {//输出超限，当n>43的时候
public:
    int climbStairs(int n) {
        if(n==1)return 1;
        else if(n==2)return 2;
        return climbStairs(n-1)+climbStairs(n-2);
    }
};
class Solution {//动态规划，通过
public:
    int climbStairs(int n) {
        int f1=0,f2=0,result=1;
        for(int i=1;i<=n;++i){
            f1=f2;
            f2=result;
            result=f1+f2;
        }
        return result;
    }
};    

83删除排序链表中的重复元素
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head==NULL)return NULL;
        ListNode* p=head;
        ListNode* q=p->next;
        while(q!=NULL){
            if(q->val==p->val){
                p->next=q->next;
                delete q;
            }
            else{
                p=p->next;
            }
            q=p->next;
        }
        return head;
    }
};

88合并两个有序数组
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        for(int i=0;i<m;++i)
            nums1[m+n-1-i]=nums1[m-1-i];
        int index=-1,index1=n,index2=0;
        while(index1<m+n&&index2<n){
            if(nums1[index1]>nums2[index2]){
                nums1[++index]=nums2[index2++];
            }else{
                nums1[++index]=nums1[index1++];
            }
        }
        while(index2<n){
            nums1[++index]=nums2[index2++];
        }
    }
};
解法2
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int index=m+n,index1=m-1,index2=n-1;
        while(index1>=0&&index2>=0){
            if(nums1[index1]>nums2[index2]){
                nums1[--index]=nums1[index1--];
            }else{
                nums1[--index]=nums2[index2--];
            }
        }
        while(index2>=0){
            nums1[--index]=nums2[index2--];
        }
        
    }
};

101对称二叉树
class Solution {
public:
    bool check(TreeNode *p, TreeNode *q) {
        if (!p && !q) return true;
        if (!p || !q) return false;
        return p->val == q->val && check(p->left, q->right) && check(p->right, q->left);
    }

    bool isSymmetric(TreeNode* root) {
        return check(root, root);
    }
};


104二叉树的最大深度
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {//这种思路很好，进行层次遍历
public:
    int maxDepth(TreeNode* root) {
        if (root == nullptr) return 0;
        queue<TreeNode*> Q;
        TreeNode *p=nullptr;
        Q.push(root);
        int max = 0;
        int size=0;
        while (!Q.empty()) {
            size=Q.size();
            while(size>0){
                p=Q.front();
                Q.pop();
                if(p->left)Q.push(p->left);
                if(p->right)Q.push(p->right);
                size-=1;
            }
            ++max;
        } 
        return max;
    }
};

class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root==NULL)return 0;
        return 1+(max(maxDepth(root->left),maxDepth(root->right)));
    }
};








