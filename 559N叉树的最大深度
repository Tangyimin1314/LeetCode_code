/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
//Solution 1
class Solution {
public:
    int maxDepth(Node* root) {
        int depth=0;
        if(root==NULL)return depth;
        queue<Node* >q;
        Node* p =NULL;
        Node* last=root;
        Node* lastTmp=root;
        q.push(root);
        while(!q.empty()){
            p=q.front();
            q.pop();
            int len = p->children.size();
            for(int i=0;i<len;i++){
                if(p->children[i]!=NULL){
                    q.push(p->children[i]);
                    lastTmp=p->children[i];
                }
            }
            if(p==last){
                depth++;
                last=lastTmp;
            }
        }
        return depth;
    }
};
//Solution2
class Solution {
public:
    int maxDepth(Node* root) {
        if(root==NULL)return 0;
        int depth=0;
        for(int i=0;i<root->children.size();i++){
            depth=max(depth,maxDepth(root->children[i]));
        }
        return depth+1;
    }
};
